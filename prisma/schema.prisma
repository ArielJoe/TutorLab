// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id                 Int                 @id @default(autoincrement())
  name               String?             @db.VarChar(100)
  birth_date         DateTime?
  address            String?             @db.VarChar(150)
  email              String?             @db.VarChar(50)
  phone_number       String?             @db.VarChar(20)
  studyContracts     StudyContract[]
  invoices           Invoice[]
  studentAttendances StudentAttendance[]
}

model Teacher {
  id                 Int                 @id @default(autoincrement())
  name               String?             @db.VarChar(100)
  birth_date         DateTime?
  address            String?             @db.VarChar(150)
  phone_number       String?             @db.VarChar(20)
  schedules          Schedule[]
  teacherAttendances TeacherAttendance[]
}

model Course {
  id              Int              @id @default(autoincrement())
  course_name     String?          @db.VarChar(50)
  description     String?          @db.VarChar(150)
  duration        Int?
  price           Float?
  schedules       Schedule[]
  selectedCourses SelectedCourse[]
}

model Period {
  id         Int        @id @default(autoincrement())
  name       String?    @db.VarChar(50)
  start_date DateTime?
  end_date   DateTime?
  schedules  Schedule[]
}

model Schedule {
  id                 Int                 @id @default(autoincrement())
  day                Int?
  start_time         DateTime?
  duration           Int?
  period             Period              @relation(fields: [Period_id], references: [id])
  Period_id          Int
  teacher            Teacher             @relation(fields: [Teacher_id], references: [id])
  Teacher_id         Int
  course             Course              @relation(fields: [Course_id], references: [id])
  Course_id          Int
  studyContracts     StudyContract[]
  teacherAttendances TeacherAttendance[]

  @@unique([id, Period_id, Teacher_id, Course_id])
}

model StudyContract {
  id                  Int                 @id @default(autoincrement())
  Schedule_id         Int
  Schedule_Period_id  Int
  Schedule_Teacher_id Int
  Schedule_Course_id  Int
  Student_id          Int
  student             Student             @relation(fields: [Student_id], references: [id])
  schedule            Schedule            @relation(fields: [Schedule_id, Schedule_Period_id, Schedule_Teacher_id, Schedule_Course_id], references: [id, Period_id, Teacher_id, Course_id])
  studentAttendances  StudentAttendance[]

  @@unique([Schedule_id, Schedule_Period_id, Schedule_Teacher_id, Schedule_Course_id, Student_id])
}

model StudentAttendance {
  id                                Int           @id @default(autoincrement())
  excused                           Boolean?
  present                           Boolean?
  sick                              Boolean?
  alpha                             Boolean?
  StudyContract_Schedule_id         Int
  StudyContract_Schedule_Period_id  Int
  StudyContract_Schedule_Teacher_id Int
  StudyContract_Schedule_Course_id  Int
  StudyContract_Student_id          Int
  studyContract                     StudyContract @relation(fields: [StudyContract_Schedule_id, StudyContract_Schedule_Period_id, StudyContract_Schedule_Teacher_id, StudyContract_Schedule_Course_id, StudyContract_Student_id], references: [Schedule_id, Schedule_Period_id, Schedule_Teacher_id, Schedule_Course_id, Student_id])
  Student                           Student?      @relation(fields: [studentId], references: [id])
  studentId                         Int?
}

model TeacherAttendance {
  id                  Int      @id @default(autoincrement())
  present             Boolean?
  sick                Boolean?
  alpha               Boolean?
  excused             Boolean?
  Schedule_id         Int
  Schedule_Period_id  Int
  Schedule_Teacher_id Int
  Schedule_Course_id  Int
  schedule            Schedule @relation(fields: [Schedule_id, Schedule_Period_id, Schedule_Teacher_id, Schedule_Course_id], references: [id, Period_id, Teacher_id, Course_id])
  Teacher             Teacher? @relation(fields: [teacherId], references: [id])
  teacherId           Int?
}

model Invoice {
  id              Int              @id @default(autoincrement())
  created_at      DateTime?
  due_date        DateTime?
  status          InvoiceStatus?
  amount          Float?
  student         Student          @relation(fields: [Student_id], references: [id])
  Student_id      Int
  selectedCourses SelectedCourse[]

  @@unique([id, Student_id])
}

model SelectedCourse {
  id                 Int     @id @default(autoincrement())
  Course_id          Int
  Invoice_id         Int
  Invoice_Student_id Int
  course             Course  @relation(fields: [Course_id], references: [id])
  invoice            Invoice @relation(fields: [Invoice_id, Invoice_Student_id], references: [id, Student_id])
}

// Enum for Invoice Status
enum InvoiceStatus {
  lunas
  belum_lunas
}
